name: GUI Focused Build

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      tag_name:
        description: 'Tag name for release'
        required: true
        default: 'v0.0.1'

jobs:
  build-gui:
    permissions:
      contents: write
      packages: read
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-latest
            platform: windows
            profile: windows
          - os: ubuntu-latest
            platform: linux
            profile: linux
          - os: macos-latest
            platform: macos
            profile: osx
    runs-on: ${{ matrix.os }}
    timeout-minutes: 90
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: 17
          cache: maven
          
      - name: Setup macOS Environment
        if: runner.os == 'macOS'
        run: |
          # Install required tools
          brew install maven || true
          
      - name: Setup Linux Environment
        if: runner.os == 'Linux'
        run: |
          # Install required packages for GUI build
          sudo apt-get update
          sudo apt-get install -y build-essential debhelper devscripts \
            libgtk-3-dev libwebkitgtk-4.0-dev libappindicator3-dev
            
      - name: Setup Windows Environment
        if: runner.os == 'Windows'
        shell: powershell
        run: |
          # Install required tools
          choco install wixtoolset -y --no-progress
          choco install visualstudio2022buildtools -y --no-progress
          choco install visualstudio2022-workload-manageddesktopbuildtools -y --no-progress
          choco install nuget.commandline -y --no-progress
          
          # Setup NuGet feeds
          nuget sources add -name "gh-ikvmnet" -source "https://nuget.pkg.github.com/ikvmnet/index.json" -username "${{ github.actor }}" -password "${{ secrets.GITHUB_TOKEN }}"
          nuget sources add -name "gh-iterate-ch" -source "https://nuget.pkg.github.com/iterate-ch/index.json" -username "${{ github.actor }}" -password "${{ secrets.GITHUB_TOKEN }}"
          
      - name: Build GUI Application
        shell: bash
        run: |
          # Set environment variables
          export MAVEN_OPTS="-Xmx2048m -XX:MaxPermSize=512m"
          
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            # Windows GUI build
            echo "Building Windows GUI..."
            
            # First build core components
            mvn clean compile -B -DskipTests -pl :core,:binding -am
            
            # Build Windows GUI with timeout handling
            cd windows
            timeout 1200 mvn package -B -DskipTests -DskipSign || echo "Build completed or timed out"
            cd ..
            
            # Check for output
            find windows/target -name "*.exe" -o -name "*.msi" | head -10
            
          elif [[ "${{ runner.os }}" == "Linux" ]]; then
            # Linux GUI build
            echo "Building Linux packages..."
            mvn clean package -B -DskipTests -DskipSign -Plinux
            
            # Build DEB and RPM packages
            cd linux
            mvn package -B -DskipTests
            cd ..
            
          elif [[ "${{ runner.os }}" == "macOS" ]]; then
            # macOS GUI build
            echo "Building macOS application..."
            mvn clean package -B -DskipTests -DskipSign -DskipNotarize -Posx
            
            # Build DMG
            cd osx
            mvn package -B -DskipTests -DskipSign -DskipNotarize
            cd ..
          fi
          
      - name: Collect Build Artifacts
        shell: bash
        run: |
          mkdir -p release-artifacts
          
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            # Windows artifacts
            find windows -name "Cyberduck*.exe" -size +1M -exec cp {} release-artifacts/ \; || true
            find windows -name "Cyberduck*.msi" -size +1M -exec cp {} release-artifacts/ \; || true
            
            # If no GUI found, package what we have
            if [ ! "$(ls -A release-artifacts)" ]; then
              echo "No Windows GUI artifacts found, creating JAR package..."
              find . -name "*.jar" -path "*/target/*" -size +1M | grep -v test | while read jar; do
                cp "$jar" release-artifacts/
              done
              
              # Create batch launcher
              echo '@echo off' > release-artifacts/Cyberduck.bat
              echo 'echo Cyberduck GUI is not available in this build.' >> release-artifacts/Cyberduck.bat
              echo 'echo This is a CLI-only version. Use duck.bat for command line interface.' >> release-artifacts/Cyberduck.bat
              echo 'pause' >> release-artifacts/Cyberduck.bat
            fi
            
          elif [[ "${{ runner.os }}" == "Linux" ]]; then
            # Linux artifacts
            find linux -name "*.deb" -exec cp {} release-artifacts/ \; || true
            find linux -name "*.rpm" -exec cp {} release-artifacts/ \; || true
            find linux -name "*.AppImage" -exec cp {} release-artifacts/ \; || true
            
          elif [[ "${{ runner.os }}" == "macOS" ]]; then
            # macOS artifacts
            find osx -name "Cyberduck*.dmg" -exec cp {} release-artifacts/ \; || true
            find osx -name "Cyberduck*.pkg" -exec cp {} release-artifacts/ \; || true
            find osx -name "Cyberduck*.zip" -exec cp {} release-artifacts/ \; || true
          fi
          
          echo "=== Release artifacts ==="
          ls -la release-artifacts/
          
      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform }}-gui-artifacts
          path: release-artifacts/*
          if-no-files-found: warn
          
  create-release:
    needs: build-gui
    runs-on: ubuntu-latest
    permissions:
      contents: write
      
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts
          
      - name: Prepare Release Assets
        run: |
          mkdir -p release
          
          # Copy all artifacts
          find ./artifacts -type f -exec cp {} ./release/ \;
          
          # List all assets
          echo "=== All release assets ==="
          ls -la ./release/
          
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.event.inputs.tag_name || github.ref_name }}
          name: Cyberduck GUI ${{ github.event.inputs.tag_name || github.ref_name }}
          body: |
            # Cyberduck GUI Release
            
            This release focuses on GUI applications for all platforms.
            
            ## Windows
            - `Cyberduck-*.exe` - Windows installer
            - `Cyberduck-*.msi` - Windows MSI package
            
            ## macOS
            - `Cyberduck-*.dmg` - macOS disk image
            - `Cyberduck-*.pkg` - macOS installer package
            - `Cyberduck-*.zip` - macOS app bundle
            
            ## Linux
            - `cyberduck_*.deb` - Debian/Ubuntu package
            - `cyberduck-*.rpm` - RedHat/Fedora package
            - `Cyberduck-*.AppImage` - Universal Linux package
            
            ## Installation
            
            ### Windows
            Download and run the .exe or .msi installer.
            
            ### macOS
            Download the .dmg file, open it, and drag Cyberduck to Applications.
            
            ### Linux
            - Debian/Ubuntu: `sudo dpkg -i cyberduck_*.deb`
            - RedHat/Fedora: `sudo rpm -i cyberduck-*.rpm`
            - AppImage: Make executable and run directly
            
            ## System Requirements
            - Windows: Windows 10 or later, .NET Framework 4.7.2+
            - macOS: macOS 10.12 or later
            - Linux: GTK3, WebKitGTK 4.0
          draft: false
          prerelease: false
          files: |
            release/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}