name: Direct Build Method

on:
  workflow_dispatch:
    inputs:
      tag_name:
        description: 'Tag name for release'
        required: true
        default: 'v0.0.1'

jobs:
  build-all:
    permissions:
      contents: write
      packages: read
    strategy:
      matrix:
        include:
          - os: windows-latest
            platform: windows
          - os: ubuntu-latest
            platform: linux
          - os: macos-latest
            platform: macos
    runs-on: ${{ matrix.os }}
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: 17
          cache: maven
          
      - name: Build JAR Files Only
        run: |
          # Build core JAR files without native components
          mvn clean compile -B -DskipTests -pl :core,:cli,:binding
          mvn jar:jar -B -pl :core,:cli,:binding
          
      - name: Create Executable JAR
        shell: bash
        run: |
          mkdir -p output
          
          # Find the CLI JAR
          cli_jar=$(find cli/target -name "cli-*.jar" | grep -v sources | head -1)
          if [ -n "$cli_jar" ]; then
            echo "Found CLI JAR: $cli_jar"
            
            # Create a simple launcher script
            if [[ "${{ runner.os }}" == "Windows" ]]; then
              echo '@echo off' > output/duck.bat
              echo 'java -jar "%~dp0duck.jar" %*' >> output/duck.bat
              cp "$cli_jar" output/duck.jar
            elif [[ "${{ runner.os }}" == "Linux" ]]; then
              echo '#!/bin/bash' > output/duck
              echo 'java -jar "$(dirname "$0")/duck.jar" "$@"' >> output/duck
              chmod +x output/duck
              cp "$cli_jar" output/duck.jar
            elif [[ "${{ runner.os }}" == "macOS" ]]; then
              echo '#!/bin/bash' > output/duck
              echo 'java -jar "$(dirname "$0")/duck.jar" "$@"' >> output/duck
              chmod +x output/duck
              cp "$cli_jar" output/duck.jar
            fi
          fi
          
          # Package core libraries
          find . -name "*.jar" -path "*/target/*" | grep -v test | grep -v sources | while read jar; do
            cp "$jar" output/ || true
          done
          
          ls -la output/
          
      - name: Create Distribution Archive
        shell: bash
        run: |
          cd output
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            # Create ZIP for Windows
            zip -r ../duck-${{ matrix.platform }}.zip *
          else
            # Create TAR.GZ for Unix
            tar -czf ../duck-${{ matrix.platform }}.tar.gz *
          fi
          cd ..
          
      - name: Upload Distribution
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform }}-distribution
          path: |
            duck-*.zip
            duck-*.tar.gz
          if-no-files-found: warn
          
  release:
    needs: build-all
    runs-on: ubuntu-latest
    permissions:
      contents: write
      
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts
          
      - name: Prepare release files
        run: |
          mkdir -p release
          find ./artifacts -name "duck-*" -exec cp {} ./release/ \;
          ls -la ./release/
          
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.event.inputs.tag_name }}
          name: Cyberduck JAR Distribution ${{ github.event.inputs.tag_name }}
          body: |
            # Cyberduck JAR Distribution
            
            This release contains Java-based distributions of Cyberduck CLI.
            
            ## Requirements
            - Java 11 or later
            
            ## Installation
            
            ### Windows
            1. Download `duck-windows.zip`
            2. Extract to desired location
            3. Run `duck.bat` from command prompt
            
            ### Linux
            1. Download `duck-linux.tar.gz`
            2. Extract: `tar -xzf duck-linux.tar.gz`
            3. Run: `./duck`
            
            ### macOS
            1. Download `duck-macos.tar.gz`
            2. Extract: `tar -xzf duck-macos.tar.gz`
            3. Run: `./duck`
            
            ## Usage
            ```
            duck --help
            ```
            
            Note: This is a Java-based distribution. For native executables, 
            please check the official Cyberduck releases.
          draft: false
          prerelease: false
          files: |
            release/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}