name: Windows Build Workaround

on:
  workflow_dispatch:
    inputs:
      tag_name:
        description: 'Tag name for release'
        required: true
        default: 'v0.0.1'

jobs:
  build-windows:
    runs-on: windows-latest
    permissions:
      contents: write
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: 17
          cache: maven
          
      - name: Try Direct JAR Build
        shell: pwsh
        run: |
          # Build just the Java parts without native components
          cd core
          mvn clean compile -B -DskipTests
          mvn jar:jar -B
          cd ..
          
          # Try to build CLI JAR
          cd cli
          mvn clean compile -B -DskipTests || echo "CLI compile finished"
          mvn jar:jar -B || echo "CLI jar finished"
          cd ..
          
      - name: Download Pre-built Windows CLI
        shell: pwsh
        run: |
          # As a workaround, download the official release
          mkdir -p release-artifacts
          
          # Try to download latest Windows CLI from official releases
          $url = "https://a48823c7295d7bd88a8e-e64911d15fb6ba651df8d16e84fea267.ssl.cf1.rackcdn.com/Cyberduck-CLI-9.1.0.43421.msi"
          
          try {
            Invoke-WebRequest -Uri $url -OutFile "release-artifacts/duck-cli-windows.msi"
            Write-Host "Downloaded official CLI"
          } catch {
            Write-Host "Failed to download official CLI"
          }
          
          # List what we have
          Get-ChildItem -Path . -Filter "*.jar" -Recurse | Where-Object { $_.Length -gt 1MB }
          
      - name: Package Available Artifacts
        shell: bash
        run: |
          # Find any JAR files we managed to build
          find . -name "*.jar" -size +1M | grep -v test | while read jar; do
            cp "$jar" release-artifacts/ || true
          done
          
          ls -la release-artifacts/
          
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-workaround-artifacts
          path: release-artifacts/*
          if-no-files-found: warn
          
      - name: Create Release
        if: github.event_name == 'workflow_dispatch'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.event.inputs.tag_name }}
          name: Windows Build ${{ github.event.inputs.tag_name }}
          body: |
            # Windows Build (Workaround)
            
            This is a workaround build for Windows.
            
            ## Contents
            - Any JAR files successfully built
            - Pre-downloaded official CLI (if available)
            
            Note: Full Windows build is having issues with interactive prompts.
          draft: false
          prerelease: true
          files: |
            release-artifacts/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}