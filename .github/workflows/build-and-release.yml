name: Build and Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      tag_name:
        description: 'Tag name for release'
        required: true
        default: 'v0.0.1'

jobs:
  build:
    permissions:
      contents: write
      packages: read
    strategy:
      matrix:
        include:
          - os: windows-latest
            platform: windows
            arch: x64
          - os: ubuntu-latest
            platform: linux
            arch: x64
          - os: macos-latest
            platform: macos
            arch: arm64
    runs-on: ${{ matrix.os }}
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: 21
          cache: maven
          
      - name: Setup Windows Build Environment
        if: runner.os == 'Windows'
        run: |
          choco install wixtoolset -y
          choco install bonjour -y
          choco install openssl -y
          
      - uses: microsoft/setup-msbuild@v2
        if: runner.os == 'Windows'
        with:
          msbuild-architecture: x64
          
      - name: Configure NuGet
        if: runner.os == 'Windows'
        env:
          NugetCredentials: "Username=${{ github.actor }};Password=${{ secrets.GITHUB_TOKEN }}"
        run: |
          echo "NuGetPackageSourceCredentials_gh-ikvmnet=${{ env.NugetCredentials }}" >> $env:GITHUB_ENV
          echo "NuGetPackageSourceCredentials_gh-iterate-ch=${{ env.NugetCredentials }}" >> $env:GITHUB_ENV
          
      - name: Build Project
        run: mvn --batch-mode clean package -DskipTests -DskipSign -DskipNotarize
        
      - name: Find and Display Build Artifacts
        shell: bash
        run: |
          echo "Looking for build artifacts..."
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            find . -name "*.exe" -o -name "*.msi" | head -20
          elif [[ "${{ runner.os }}" == "Linux" ]]; then
            find . -name "duck" -type f | head -20
          elif [[ "${{ runner.os }}" == "macOS" ]]; then
            find . -name "*.app" -o -name "*.dmg" -o -name "*.pkg" -o -name "duck.bundle" | head -20
          fi
          
      - name: Upload Build Artifact - macOS
        if: runner.os == 'macOS'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform }}-${{ matrix.arch }}-build
          path: |
            cli/osx/target/duck.bundle
            osx/target/*.dmg
            osx/target/*.pkg
          if-no-files-found: warn
          
      - name: Upload Build Artifact - Linux
        if: runner.os == 'Linux'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform }}-${{ matrix.arch }}-build
          path: |
            cli/linux/target/release/duck
            cli/linux/target/*.deb
            cli/linux/target/*.rpm
          if-no-files-found: warn
          
      - name: Upload Build Artifact - Windows
        if: runner.os == 'Windows'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform }}-${{ matrix.arch }}-build
          path: |
            cli/windows/target/*.exe
            windows/target/*.msi
            windows/target/*.exe
          if-no-files-found: warn
          
  release:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
      
    steps:
      - uses: actions/checkout@v4
      
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts
          
      - name: Display structure of downloaded files
        run: |
          echo "=== All artifacts ==="
          ls -la ./artifacts/
          echo "=== Contents of each artifact ==="
          for dir in ./artifacts/*/; do
            echo "Contents of $dir:"
            ls -la "$dir"
          done
        
      - name: Package artifacts
        run: |
          mkdir -p release-assets
          # Package macOS
          if [ -d "./artifacts/macos-arm64-build/cli/osx/target/duck.bundle" ]; then
            cd ./artifacts/macos-arm64-build/cli/osx/target/
            zip -r ../../../../../release-assets/duck-macos-arm64.zip duck.bundle
            cd -
          fi
          # Package Linux
          if [ -f "./artifacts/linux-x64-build/cli/linux/target/release/duck" ]; then
            cp ./artifacts/linux-x64-build/cli/linux/target/release/duck ./release-assets/duck-linux-x64
            chmod +x ./release-assets/duck-linux-x64
          fi
          # Package Windows
          for exe in ./artifacts/windows-x64-build/cli/windows/target/*.exe ./artifacts/windows-x64-build/windows/target/*.exe; do
            if [ -f "$exe" ]; then
              cp "$exe" ./release-assets/
              break
            fi
          done
          # List final assets
          echo "=== Final release assets ==="
          ls -la ./release-assets/
          
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.event.inputs.tag_name || github.ref_name }}
          name: Release ${{ github.event.inputs.tag_name || github.ref_name }}
          draft: false
          prerelease: false
          files: |
            release-assets/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}