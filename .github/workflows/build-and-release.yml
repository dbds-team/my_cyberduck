name: Build and Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      tag_name:
        description: 'Tag name for release'
        required: true
        default: 'v0.0.1'

jobs:
  build:
    permissions:
      contents: write
      packages: read
    strategy:
      matrix:
        include:
          - os: windows-latest
            platform: windows
            arch: x64
          - os: ubuntu-latest
            platform: linux
            arch: x64
          - os: macos-latest
            platform: macos
            arch: arm64
    runs-on: ${{ matrix.os }}
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: 21
          cache: maven
          
      - name: Setup Windows Build Environment
        if: runner.os == 'Windows'
        run: |
          choco install wixtoolset -y
          choco install bonjour -y
          choco install openssl -y
          
      - uses: microsoft/setup-msbuild@v2
        if: runner.os == 'Windows'
        with:
          msbuild-architecture: x64
          
      - name: Configure NuGet
        if: runner.os == 'Windows'
        env:
          NugetCredentials: "Username=${{ github.actor }};Password=${{ secrets.GITHUB_TOKEN }}"
        run: |
          echo "NuGetPackageSourceCredentials_gh-ikvmnet=${{ env.NugetCredentials }}" >> $env:GITHUB_ENV
          echo "NuGetPackageSourceCredentials_gh-iterate-ch=${{ env.NugetCredentials }}" >> $env:GITHUB_ENV
          
      - name: Build Project
        run: mvn --batch-mode clean package -DskipTests -DskipSign -DskipNotarize
        
      - name: Find Build Artifacts
        id: find_artifacts
        shell: bash
        run: |
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            echo "artifact_path=$(find . -name "*.exe" -o -name "*.msi" | head -1)" >> $GITHUB_OUTPUT
            echo "artifact_name=cyberduck-${{ matrix.platform }}-${{ matrix.arch }}.exe" >> $GITHUB_OUTPUT
          elif [[ "${{ runner.os }}" == "Linux" ]]; then
            echo "artifact_path=$(find . -name "*.deb" -o -name "*.rpm" -o -name "*.AppImage" | head -1)" >> $GITHUB_OUTPUT
            echo "artifact_name=cyberduck-${{ matrix.platform }}-${{ matrix.arch }}.AppImage" >> $GITHUB_OUTPUT
          elif [[ "${{ runner.os }}" == "macOS" ]]; then
            echo "artifact_path=$(find . -name "*.dmg" -o -name "*.pkg" | head -1)" >> $GITHUB_OUTPUT
            echo "artifact_name=cyberduck-${{ matrix.platform }}-${{ matrix.arch }}.dmg" >> $GITHUB_OUTPUT
          fi
          
      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform }}-${{ matrix.arch }}-build
          path: ${{ steps.find_artifacts.outputs.artifact_path }}
          
  release:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
      
    steps:
      - uses: actions/checkout@v4
      
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts
          
      - name: Display structure of downloaded files
        run: ls -la ./artifacts/
        
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.event.inputs.tag_name || github.ref_name }}
          release_name: Release ${{ github.event.inputs.tag_name || github.ref_name }}
          draft: false
          prerelease: false
          
      - name: Upload Windows Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/windows-x64-build/*
          asset_name: cyberduck-windows-x64.exe
          asset_content_type: application/octet-stream
          
      - name: Upload Linux Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/linux-x64-build/*
          asset_name: cyberduck-linux-x64.AppImage
          asset_content_type: application/octet-stream
          
      - name: Upload macOS Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/macos-arm64-build/*
          asset_name: cyberduck-macos-arm64.dmg
          asset_content_type: application/octet-stream