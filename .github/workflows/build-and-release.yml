name: Build and Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      tag_name:
        description: 'Tag name for release'
        required: true
        default: 'v0.0.1'

jobs:
  build:
    permissions:
      contents: write
      packages: read
    strategy:
      matrix:
        include:
          - os: windows-latest
            platform: windows
            arch: x64
          - os: ubuntu-latest
            platform: linux
            arch: x64
          - os: macos-latest
            platform: macos
            arch: arm64
    runs-on: ${{ matrix.os }}
    timeout-minutes: 60
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Set up JDK 11
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: 11
          cache: maven
          
      - name: Setup Windows Build Environment
        if: runner.os == 'Windows'
        run: |
          choco install wixtoolset -y
          choco install bonjour -y
          
      - uses: microsoft/setup-msbuild@v2
        if: runner.os == 'Windows'
        with:
          msbuild-architecture: x64
          
      - name: Configure NuGet
        if: runner.os == 'Windows'
        env:
          NugetCredentials: "Username=${{ github.actor }};Password=${{ secrets.GITHUB_TOKEN }}"
        run: |
          echo "NuGetPackageSourceCredentials_gh-ikvmnet=${{ env.NugetCredentials }}" >> $env:GITHUB_ENV
          echo "NuGetPackageSourceCredentials_gh-iterate-ch=${{ env.NugetCredentials }}" >> $env:GITHUB_ENV
          
      - name: Build and Package - All Platforms
        run: |
          # Build with installer profile to create GUI applications
          mvn verify -DskipTests -DskipSign -Pinstaller
          
      - name: Find Build Artifacts
        shell: bash
        run: |
          echo "=== Finding release artifacts ==="
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            echo "=== Windows release artifacts ==="
            ls -la windows/target/release/ || echo "No Windows release directory"
            find windows/target -name "*.exe" -o -name "*.msi" | grep -E "(release|setup)" || true
          elif [[ "${{ runner.os }}" == "Linux" ]]; then
            echo "=== Linux release artifacts ==="
            ls -la cli/linux/target/release/ || echo "No Linux release directory"
            find cli/linux/target -name "*.deb" -o -name "*.rpm" || true
          elif [[ "${{ runner.os }}" == "macOS" ]]; then
            echo "=== macOS release artifacts ==="
            ls -la osx/target/release/ || echo "No macOS release directory"
            ls -la cli/osx/target/release/ || echo "No CLI macOS release directory"
            find osx/target -name "*.dmg" -o -name "*.pkg" -o -name "*.zip" || true
          fi
          
      - name: Upload Build Artifact - macOS
        if: runner.os == 'macOS'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform }}-${{ matrix.arch }}-build
          path: |
            osx/target/release/*.zip
            osx/target/release/*.pkg
            osx/target/release/*.dmg
            cli/osx/target/release/*.pkg
            cli/osx/target/release/*.tar.gz
          if-no-files-found: warn
          
      - name: Upload Build Artifact - Linux
        if: runner.os == 'Linux'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform }}-${{ matrix.arch }}-build
          path: |
            cli/linux/target/release/*.deb
            cli/linux/target/release/*.rpm
          if-no-files-found: warn
          
      - name: Upload Build Artifact - Windows
        if: runner.os == 'Windows'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform }}-${{ matrix.arch }}-build
          path: |
            windows/target/release/*.exe
            windows/target/release/*.msi
            cli/windows/target/release/*.exe
            cli/windows/target/release/*.msi
          if-no-files-found: warn
          
  release:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
      
    steps:
      - uses: actions/checkout@v4
      
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts
          
      - name: Display artifacts
        run: |
          echo "=== All downloaded artifacts ==="
          find ./artifacts -type f -ls
          
      - name: Package artifacts
        run: |
          mkdir -p release-assets
          
          # Copy macOS artifacts
          if [ -d "./artifacts/macos-arm64-build" ]; then
            echo "=== Copying macOS artifacts ==="
            find ./artifacts/macos-arm64-build -name "*.dmg" -exec cp {} ./release-assets/ \;
            find ./artifacts/macos-arm64-build -name "*.pkg" -exec cp {} ./release-assets/ \;
            find ./artifacts/macos-arm64-build -name "*.zip" -exec cp {} ./release-assets/ \;
          fi
          
          # Copy Linux artifacts
          if [ -d "./artifacts/linux-x64-build" ]; then
            echo "=== Copying Linux artifacts ==="
            find ./artifacts/linux-x64-build -name "*.deb" -exec cp {} ./release-assets/ \;
            find ./artifacts/linux-x64-build -name "*.rpm" -exec cp {} ./release-assets/ \;
          fi
          
          # Copy Windows artifacts
          if [ -d "./artifacts/windows-x64-build" ]; then
            echo "=== Copying Windows artifacts ==="
            find ./artifacts/windows-x64-build -name "*.exe" -exec cp {} ./release-assets/ \;
            find ./artifacts/windows-x64-build -name "*.msi" -exec cp {} ./release-assets/ \;
          fi
          
          # List final assets
          echo "=== Final release assets ==="
          ls -la ./release-assets/
          
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.event.inputs.tag_name || github.ref_name }}
          name: Cyberduck ${{ github.event.inputs.tag_name || github.ref_name }}
          body: |
            # Cyberduck Release
            
            ## GUI Applications
            
            ### Windows
            - `Cyberduck-*.exe` - Windows installer
            - `Cyberduck-*.msi` - Windows MSI installer
            
            ### macOS
            - `Cyberduck-*.dmg` - macOS disk image
            - `Cyberduck-*.pkg` - macOS installer package
            - `Cyberduck-*.zip` - macOS application bundle
            
            ## Command Line Interface (CLI)
            
            ### Windows
            - `duck-*.exe` - Windows CLI installer
            - `duck-*.msi` - Windows CLI MSI
            
            ### macOS
            - `duck-*.pkg` - macOS CLI installer
            - `duck-*.tar.gz` - macOS CLI archive
            
            ### Linux
            - `duck-*.deb` - Debian/Ubuntu package
            - `duck-*.rpm` - RedHat/Fedora package
            
            ## System Requirements
            - Java 11 or later
            - Windows: .NET Framework 4.7.2+
            - macOS: macOS 10.12+
          draft: false
          prerelease: false
          files: |
            release-assets/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}