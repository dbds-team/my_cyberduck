name: Build and Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      tag_name:
        description: 'Tag name for release'
        required: true
        default: 'v0.0.1'

jobs:
  build:
    permissions:
      contents: write
      packages: read
    strategy:
      matrix:
        include:
          - os: windows-latest
            platform: windows
            arch: x64
          - os: ubuntu-latest
            platform: linux
            arch: x64
          - os: macos-latest
            platform: macos
            arch: arm64
    runs-on: ${{ matrix.os }}
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: 21
          cache: maven
          
      - name: Setup Windows Build Environment
        if: runner.os == 'Windows'
        run: |
          choco install wixtoolset -y
          choco install bonjour -y
          choco install openssl -y
          
      - uses: microsoft/setup-msbuild@v2
        if: runner.os == 'Windows'
        with:
          msbuild-architecture: x64
          
      - name: Configure NuGet
        if: runner.os == 'Windows'
        env:
          NugetCredentials: "Username=${{ github.actor }};Password=${{ secrets.GITHUB_TOKEN }}"
        run: |
          echo "NuGetPackageSourceCredentials_gh-ikvmnet=${{ env.NugetCredentials }}" >> $env:GITHUB_ENV
          echo "NuGetPackageSourceCredentials_gh-iterate-ch=${{ env.NugetCredentials }}" >> $env:GITHUB_ENV
          
      - name: Build GUI - Windows
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          cd windows
          msbuild build.proj /t:Restore /p:Configuration=Release
          msbuild build.proj /t:Build /p:Configuration=Release /p:BuildModule=Project
          
      - name: Build GUI - macOS
        if: runner.os == 'macOS'
        run: |
          cd osx
          mvn --batch-mode clean package -DskipTests -DskipSign -DskipNotarize
          
      - name: Build GUI - Linux
        if: runner.os == 'Linux'
        run: |
          # Linux doesn't have a native GUI, build the full package
          mvn --batch-mode clean package -DskipTests -DskipSign -DskipNotarize -pl :parent,:defaults,:core,:binding,:libcore,:i18n,:cryptomator,:bonjour,:importer,:protocols,:osx -am
        
      - name: Find and Display Build Artifacts
        shell: bash
        run: |
          echo "=== Current directory ==="
          pwd
          echo "=== Looking for all target directories ==="
          find . -type d -name "target" | head -20
          echo "=== Looking for build artifacts ==="
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            echo "=== Windows GUI build ==="
            ls -la windows/target/ || echo "windows/target not found"
            find windows -name "*.exe" -ls | head -20
            find windows -name "*.msi" -ls | head -20
          elif [[ "${{ runner.os }}" == "Linux" ]]; then
            echo "=== Linux build artifacts ==="
            find . -name "*.AppImage" -o -name "*.deb" -o -name "*.rpm" | head -20
            ls -la target/ || echo "target not found"
          elif [[ "${{ runner.os }}" == "macOS" ]]; then
            echo "=== macOS GUI build ==="
            find osx -name "*.app" -o -name "*.dmg" -o -name "*.pkg" | head -20
            ls -la osx/target/ || echo "osx/target not found"
          fi
          
      - name: Upload Build Artifact - macOS
        if: runner.os == 'macOS'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform }}-${{ matrix.arch }}-build
          path: |
            osx/target/*.dmg
            osx/target/*.pkg
            osx/target/*.app/**
          if-no-files-found: warn
          
      - name: Upload Build Artifact - Linux
        if: runner.os == 'Linux'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform }}-${{ matrix.arch }}-build
          path: |
            target/*.AppImage
            target/*.deb
            target/*.rpm
            target/*.jar
          if-no-files-found: warn
          
      - name: Upload Build Artifact - Windows
        if: runner.os == 'Windows'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform }}-${{ matrix.arch }}-build
          path: |
            windows/target/Cyberduck.exe
            windows/target/*.dll
            windows/src/main/wix/Bundle/target/*.exe
            windows/src/main/wix/Bundle/target/*.msi
          if-no-files-found: warn
          
  release:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
      
    steps:
      - uses: actions/checkout@v4
      
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts
          
      - name: Display structure of downloaded files
        run: |
          echo "=== All artifacts ==="
          ls -la ./artifacts/
          echo "=== Contents of each artifact ==="
          for dir in ./artifacts/*/; do
            echo "Contents of $dir:"
            ls -la "$dir"
          done
        
      - name: Package artifacts
        run: |
          mkdir -p release-assets
          
          # Package macOS
          echo "=== Processing macOS artifacts ==="
          if [ -d "./artifacts/macos-arm64-build" ]; then
            # Look for DMG installer
            dmg=$(find ./artifacts/macos-arm64-build -name "*.dmg" | head -1)
            if [ -n "$dmg" ]; then
              echo "Found DMG at: $dmg (size: $(du -h "$dmg" | cut -f1))"
              cp "$dmg" ./release-assets/Cyberduck-macos-arm64.dmg
            fi
            # Look for PKG installer
            pkg=$(find ./artifacts/macos-arm64-build -name "*.pkg" | head -1)
            if [ -n "$pkg" ]; then
              echo "Found PKG at: $pkg (size: $(du -h "$pkg" | cut -f1))"
              cp "$pkg" ./release-assets/Cyberduck-macos-arm64.pkg
            fi
          fi
          
          # Package Linux
          echo "=== Processing Linux artifacts ==="
          if [ -d "./artifacts/linux-x64-build" ]; then
            # Look for AppImage
            appimage=$(find ./artifacts/linux-x64-build -name "*.AppImage" | head -1)
            if [ -n "$appimage" ]; then
              echo "Found AppImage at: $appimage (size: $(du -h "$appimage" | cut -f1))"
              cp "$appimage" ./release-assets/Cyberduck-linux-x64.AppImage
              chmod +x ./release-assets/Cyberduck-linux-x64.AppImage
            fi
            # Look for DEB package
            deb=$(find ./artifacts/linux-x64-build -name "*.deb" | head -1)
            if [ -n "$deb" ]; then
              echo "Found DEB at: $deb (size: $(du -h "$deb" | cut -f1))"
              cp "$deb" ./release-assets/Cyberduck-linux-x64.deb
            fi
            # Look for RPM package
            rpm=$(find ./artifacts/linux-x64-build -name "*.rpm" | head -1)
            if [ -n "$rpm" ]; then
              echo "Found RPM at: $rpm (size: $(du -h "$rpm" | cut -f1))"
              cp "$rpm" ./release-assets/Cyberduck-linux-x64.rpm
            fi
            # As fallback, look for JAR
            if [ -z "$appimage" ] && [ -z "$deb" ] && [ -z "$rpm" ]; then
              jar=$(find ./artifacts/linux-x64-build -name "*.jar" -size +10M | head -1)
              if [ -n "$jar" ]; then
                echo "Found JAR at: $jar (size: $(du -h "$jar" | cut -f1))"
                cp "$jar" ./release-assets/Cyberduck-linux-x64.jar
              fi
            fi
          fi
          
          # Package Windows
          echo "=== Processing Windows artifacts ==="
          if [ -d "./artifacts/windows-x64-build" ]; then
            # Look for GUI exe (Cyberduck.exe)
            gui_exe=$(find ./artifacts/windows-x64-build -name "Cyberduck.exe" | head -1)
            if [ -n "$gui_exe" ]; then
              echo "Found GUI exe at: $gui_exe (size: $(du -h "$gui_exe" | cut -f1))"
              # Package GUI with all dependencies
              gui_dir=$(dirname "$gui_exe")
              if [ -d "$gui_dir" ]; then
                echo "Packaging GUI with dependencies..."
                cd "$gui_dir"
                zip -r Cyberduck-windows-x64.zip Cyberduck.exe *.dll 2>/dev/null || zip -r Cyberduck-windows-x64.zip Cyberduck.exe
                mv Cyberduck-windows-x64.zip $GITHUB_WORKSPACE/release-assets/
                cd $GITHUB_WORKSPACE
              fi
            fi
            
            # Look for installer exe or msi
            installer=$(find ./artifacts/windows-x64-build -name "*.exe" -o -name "*.msi" | grep -E "(Installer|Setup|Bundle)" | head -1)
            if [ -n "$installer" ]; then
              echo "Found installer at: $installer (size: $(du -h "$installer" | cut -f1))"
              cp "$installer" ./release-assets/Cyberduck-Installer-windows-x64.exe
            fi
          fi
          
          # List final assets
          echo "=== Final release assets ==="
          ls -la ./release-assets/
          
          # Check if we have any assets
          if [ -z "$(ls -A ./release-assets)" ]; then
            echo "WARNING: No release assets found!"
            echo "Creating placeholder file"
            echo "Build artifacts not found. Check build logs." > ./release-assets/README.txt
          fi
          
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.event.inputs.tag_name || github.ref_name }}
          name: Release ${{ github.event.inputs.tag_name || github.ref_name }}
          draft: false
          prerelease: false
          files: |
            release-assets/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}