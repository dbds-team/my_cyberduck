name: Build and Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      tag_name:
        description: 'Tag name for release'
        required: true
        default: 'v0.0.1'

jobs:
  build:
    permissions:
      contents: write
      packages: read
    strategy:
      matrix:
        include:
          - os: windows-latest
            platform: windows
            arch: x64
          - os: ubuntu-latest
            platform: linux
            arch: x64
          - os: macos-latest
            platform: macos
            arch: arm64
    runs-on: ${{ matrix.os }}
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: 21
          cache: maven
          
      - name: Setup Windows Build Environment
        if: runner.os == 'Windows'
        run: |
          choco install wixtoolset -y
          choco install bonjour -y
          choco install openssl -y
          
      - uses: microsoft/setup-msbuild@v2
        if: runner.os == 'Windows'
        with:
          msbuild-architecture: x64
          
      - name: Configure NuGet
        if: runner.os == 'Windows'
        env:
          NugetCredentials: "Username=${{ github.actor }};Password=${{ secrets.GITHUB_TOKEN }}"
        run: |
          echo "NuGetPackageSourceCredentials_gh-ikvmnet=${{ env.NugetCredentials }}" >> $env:GITHUB_ENV
          echo "NuGetPackageSourceCredentials_gh-iterate-ch=${{ env.NugetCredentials }}" >> $env:GITHUB_ENV
          
      - name: Build Project
        run: mvn --batch-mode clean package -DskipTests -DskipSign -DskipNotarize
        
      - name: Find and Display Build Artifacts
        shell: bash
        run: |
          echo "=== Current directory ==="
          pwd
          echo "=== Looking for all target directories ==="
          find . -type d -name "target" | head -20
          echo "=== Looking for build artifacts ==="
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            echo "=== All EXE files ==="
            find . -name "*.exe" -ls | head -20
            echo "=== All MSI files ==="
            find . -name "*.msi" -ls | head -20
            echo "=== Check cli/windows/target ==="
            ls -la cli/windows/target/ || echo "cli/windows/target not found"
            echo "=== Check windows/target ==="
            ls -la windows/target/ || echo "windows/target not found"
          elif [[ "${{ runner.os }}" == "Linux" ]]; then
            echo "=== All duck executables ==="
            find . -name "duck" -type f -ls | head -20
            echo "=== Check cli/linux/target ==="
            ls -la cli/linux/target/ || echo "cli/linux/target not found"
            echo "=== Check cli/target ==="
            ls -la cli/target/ || echo "cli/target not found"
          elif [[ "${{ runner.os }}" == "macOS" ]]; then
            echo "=== All app/dmg/pkg files ==="
            find . \( -name "*.app" -o -name "*.dmg" -o -name "*.pkg" \) -ls | head -20
            echo "=== All bundle directories ==="
            find . -name "*.bundle" -type d -ls | head -20
          fi
          
      - name: Upload Build Artifact - macOS
        if: runner.os == 'macOS'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform }}-${{ matrix.arch }}-build
          path: |
            cli/osx/target/duck.bundle/**
            osx/target/*.dmg
            osx/target/*.pkg
          if-no-files-found: warn
          
      - name: Upload Build Artifact - Linux
        if: runner.os == 'Linux'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform }}-${{ matrix.arch }}-build
          path: |
            cli/target/duck
            cli/linux/target/duck
            cli/linux/target/release/duck
            cli/target/*.jar
            cli/linux/target/*.deb
            cli/linux/target/*.rpm
          if-no-files-found: warn
          
      - name: Upload Build Artifact - Windows
        if: runner.os == 'Windows'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform }}-${{ matrix.arch }}-build
          path: |
            cli/windows/target/Release/*.exe
            cli/windows/target/Release/*.msi
            windows/target/Cyberduck.exe
            windows/target/*.msi
            windows/target/*.dll
          if-no-files-found: warn
          
  release:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
      
    steps:
      - uses: actions/checkout@v4
      
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts
          
      - name: Display structure of downloaded files
        run: |
          echo "=== All artifacts ==="
          ls -la ./artifacts/
          echo "=== Contents of each artifact ==="
          for dir in ./artifacts/*/; do
            echo "Contents of $dir:"
            ls -la "$dir"
          done
        
      - name: Package artifacts
        run: |
          mkdir -p release-assets
          
          # Package macOS
          echo "=== Processing macOS artifacts ==="
          if [ -d "./artifacts/macos-arm64-build" ]; then
            # Look for duck.bundle
            bundle=$(find ./artifacts/macos-arm64-build -name "duck.bundle" -type d | head -1)
            if [ -n "$bundle" ]; then
              echo "Found bundle at: $bundle"
              cd $(dirname "$bundle")
              zip -r duck-macos-arm64.zip $(basename "$bundle")
              mv duck-macos-arm64.zip $GITHUB_WORKSPACE/release-assets/
              cd $GITHUB_WORKSPACE
            fi
          fi
          
          # Package Linux
          echo "=== Processing Linux artifacts ==="
          if [ -d "./artifacts/linux-x64-build" ]; then
            # Look for duck executable
            duck=$(find ./artifacts/linux-x64-build -name "duck" -type f | head -1)
            if [ -n "$duck" ]; then
              echo "Found duck at: $duck (size: $(du -h "$duck" | cut -f1))"
              cp "$duck" ./release-assets/duck-linux-x64
              chmod +x ./release-assets/duck-linux-x64
            else
              # Try to find jar file as fallback
              jar=$(find ./artifacts/linux-x64-build -name "*.jar" | grep -E "(cli|duck)" | head -1)
              if [ -n "$jar" ]; then
                echo "Found jar at: $jar (size: $(du -h "$jar" | cut -f1))"
                cp "$jar" ./release-assets/duck-linux-x64.jar
              fi
            fi
          fi
          
          # Package Windows
          echo "=== Processing Windows artifacts ==="
          if [ -d "./artifacts/windows-x64-build" ]; then
            # Look for CLI exe in Release folder first (these are the actual builds)
            cli_exe=$(find ./artifacts/windows-x64-build -path "*/Release/*.exe" -size +10M | head -1)
            if [ -n "$cli_exe" ]; then
              echo "Found CLI exe at: $cli_exe (size: $(du -h "$cli_exe" | cut -f1))"
              cp "$cli_exe" ./release-assets/duck-cli-windows-x64.exe
            fi
            
            # Look for GUI exe (Cyberduck.exe)
            gui_exe=$(find ./artifacts/windows-x64-build -name "Cyberduck.exe" | head -1)
            if [ -n "$gui_exe" ]; then
              echo "Found GUI exe at: $gui_exe (size: $(du -h "$gui_exe" | cut -f1))"
              cp "$gui_exe" ./release-assets/Cyberduck-windows-x64.exe
              # Also package any DLLs in the same directory
              gui_dir=$(dirname "$gui_exe")
              if [ -d "$gui_dir" ]; then
                echo "Packaging GUI with dependencies..."
                cd "$gui_dir"
                zip -r Cyberduck-GUI-windows-x64.zip Cyberduck.exe *.dll 2>/dev/null || true
                mv Cyberduck-GUI-windows-x64.zip $GITHUB_WORKSPACE/release-assets/ 2>/dev/null || true
                cd $GITHUB_WORKSPACE
              fi
            fi
            
            # Look for MSI installer in Release folder
            msi=$(find ./artifacts/windows-x64-build -path "*/Release/*.msi" -size +10M | head -1)
            if [ -n "$msi" ]; then
              echo "Found msi at: $msi (size: $(du -h "$msi" | cut -f1))"
              cp "$msi" ./release-assets/duck-installer-windows-x64.msi
            fi
          fi
          
          # List final assets
          echo "=== Final release assets ==="
          ls -la ./release-assets/
          
          # Check if we have any assets
          if [ -z "$(ls -A ./release-assets)" ]; then
            echo "WARNING: No release assets found!"
            echo "Creating placeholder file"
            echo "Build artifacts not found. Check build logs." > ./release-assets/README.txt
          fi
          
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.event.inputs.tag_name || github.ref_name }}
          name: Release ${{ github.event.inputs.tag_name || github.ref_name }}
          draft: false
          prerelease: false
          files: |
            release-assets/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}